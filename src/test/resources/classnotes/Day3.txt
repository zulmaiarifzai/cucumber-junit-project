07/02/2022

Today's schedule: #1- dryRun - review
                  #2- tags   - review
                  #3- Background
                  #4- Hooks
                  #5- Html Reports
                  #6- Parameterization


 Upcoming topics: #7- dataTables
                  #8- scenario outlines
                  #9- cucumber rerun
                  #10-report generation
                  #11- parallel testing



  - We will be focusing more on "Tell me about your framework?" question.


=============================================================================================================================

What is a framework?

- Frameworks are basically commonly used, and proven approach of creating file and folder structure, creating smart logic (implementing design patterns, utilities) to be able to easily handle and maintain our project

Why do we create a framework?
- Frameworks are created to apply re-usability, maintainability, scalability, easy to use, easy to understand.


- Tell me about your framework?

    - Basically they want to hear how you created your framework, and what we used in it?

    - What tools we used in our project?
    - Which programming language we used in our project?
    - Which testing tools we used in our project, and why?
    - Which design patterns we used in our project, and why?
    - What kind of folder structure we created, and why?

- I used Java as programming language in my project
- Selenium
- Maven
- Cucumber
- TestNG/JUnit

Design patterns we used:
- Page Object Model Design Pattern
- Singleton Design Pattern (Driver)

Utility classes we created:
- Driver
- ConfigurationReader
- BrowserUtils

We implemented BDD approach

- We also implemented Data Driven Testing in our project
- .properties file
- parameterization (intro)
- Scenario Outline
- APACHE POI (dependency)--> read from and write to excel

-------------------------------------------------------------------------------------------------------------

BDD Framework :  Maven(build) + Cucumber(behave) + Selenium(automation) + Junit(testing)
                 POM Design pattern

- Project
    - src
      - test
        - java
          - com.cydeo  ( company/application name )
            - pages
              - PageClasses (We store webElement)
            - runner
              - CukesRunner (We run our tests)
            - step_definitions
              - StepDefClasses ( implementation layer: We do code implementation with using Java+Selenium+Junit)
              - Hooks  (We have @Before and @After Scenario annotations coming from cucumber. Especially using for taking screenshot under @After)
            - utilities
              - BrowserUtil ( We have common useful methods which I need in my most tests )
              - ConfigurationReader ( To stay away from hardcoding I store my mostly using test data in properties file. This class helping me to read this file)
              - Driver ( I have singleton design pattern in my Driver class [remember from if(driver==null){setup driver}else {return driver;}]
                         Whenever I need driver I am calling it from Driver class and it makes me to use one single driver each time )
        - resources
          - features
            - file.feature ( business layer: We write Feature, Scenario, and scenario steps with using gherkin language )

    - target ( We get Cucumber Report under target folder )
    - configuration.properties ( We store test data )
    - pom.xml ( comes from maven and we are getting need tools with using dependencies )


=========================================================================================================================

Q: What are the 2 different sides of BDD?

    #1- BUSINESS LAYER : feature files
    #2- IMPLEMENTATION LAYER : step definitions

#1- BUSINESS LAYER : feature files
    - Where we write our features and scenarios in Gherkin language
    - Gherkin is basically English.
    - It makes it very easy to understand for non-technical member of the team
    - We use certain keywords to implement Cucumber logic in feature files.
        - Feature:
        - Scenario:
        - Given, When, Then, And, But

#2- IMPLEMENTATION LAYER : step definitions
    - We generate snippets and implement them in "step_definitions" package

Q: What is a snippet?
    - Unimplemented step definition methods that are automatically generated by Cucumber.

@wip = work in progress

- Different ways of generating snippet:

#1- Run the RunnerClass and generate the snippet in console
#2- Hover over the unimplemented step --> Create step definition --> Select class where we want it
    --> We can generate snippet for more steps:
        - Hover over one line --> More actions --> Create all step definitions
#3- Put your cursor on the unimplemented line:
    Windows: ALT + Enter --> Create step definition --> Select class where we want it
    Mac: Option + Enter --> Create step definition --> Select class where we want it

------------------------------------------------------

- We can re-use the step we generate in feature files, but we will have only 1 snippet and 1 implementation for that specific STEP.
- Every time we use the same step, our code will find the implementation and execute the same method regardless of which feature or sceario we use our step from.

-------------------------------------------------------

- Where do we control or trigger our framework?
    - Runner class
    - TestRunner
    - CukesRunner

- What aspects of the project we control from Runner class?
    - plugin    : determines what type of report we want to generate with our project, and also where we want to store.
    - features  : we provide the path of the 'features' directory and let our project know where to find all the feature files.
    - glue      : glue gives path to the package of the step_definitions
    - dryrun    : dryRun determines if we want to execute the step_definitions or not
        - if dryRun is true: dryRun is turned on, and step definitions are turned off (will not run)
        - if dryRUn is false: dryRun is turned off, and step definitions are turned on (will run)

        - this is mostly used for when implementing new steps and step definitions, and we do not want to run the code and open browser etc, just to get the snippets.
        - we turn off the step_definitions and just generate snippets

    - tags:
        - What are tags and why we use them?
        - Tags allows us to create different scenario suites or groups to run
        - we can include, or exclude different feature files or scenarios using tags.

    - or:
        - less specific way of creating group.
        - @a or @b
        - if a scenario or feature has either @a or @b, it will be executed.
        - this is similar to || 'or' in java

    - and
        - more specific way of creating group
        - @a and @b
        - the scenario MUST have both @a and @b to be able to get executed.
        - this is similar to && 'and' in java

    - and not
        - if we want to exclude some certain @tag, group of feature files or scenarios, we can put the tag on top of them, and use with 'and not'
        - they will not be executed

        @a or @b and not @c

------------------------------------------------------------------------

BACKGROUND:

    - Background is very similar to @BeforeMethod in TestNG.
    - @BeforeMethod executes given code/method before each Test in that SPECIFIC CLASS.

    - Background runs before each SCENARIO in that SPECIFIC FEATURE FILE.
    - The step we pass under the "Background:" will execute only once before each step

    - Important thing to keep in mind is that "Background" will be applying to each and every scenario in the same feature file.
    - Therefore we must make sure every scenario is able to pick up and continue where the background is leaving the code.


----------------------------------------------------------------------------

HOOKS CLASS:

    - Hooks class will allow us to pass pre- and post- conditions for each scenario and each step.
    - Hooks class is separated from feature file
    - Therefore it will go into the implementation side (step_definitions)

Q: How does my project knows where to find the Hooks class and execute the annotations?
    - Basically logic is coming from the cucumber annotations and also glue path we provide in the runner class.

Q: Can we create more than 1 @Before, @After, @BeforeStep, @AfterStep
- Yes.

- If we have multiple versions of the same annotation, we can prioritize the running order using the "order" keyword.

- The lower the number passed in the order, earlier it will executed.
- The methods will be executed in the order it is specified with numbers.

    @Before (order = 1)
    public void setupScenario(){
        System.out.println("====Setting up browser using cucumber @Before");
    }

    @Before (value = "@login", order = 2)
    public void setupScenarioForLogins(){
        System.out.println("====this will only apply to scenarios with @login tag");
    }

- We can specify which annotation is running for which scenarios or features using @TAGS.
- If I want some scenario/feature to have pre- /post- conditions, I can use certain @TAG, and pass the same @TAG into the annotation in Hooks class.


@Before
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running BEFORE each and every SCENARIO in our project (unless we specify with @TAGS)

@After
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running AFTER each and every SCENARIO in our project (unless we specify with @TAGS)

@BeforeStep
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running BEFORE each and every STEP in our project (unless we specify with @TAGS)

@AfterStep
    - comes from cucumber-java dependency
    - this will change the behavior of the method we use it.
    - this method will be running AFTER each and every STEP in our project (unless we specify with @TAGS)

=======================================================================================================

Google Practice

------------------------------------


HTML REPORT

- How do we decide what kind of report we are generating?

    - plugin : will allow us to decide the type of the report we want to generate
     plugin  --> where we decide what kind of report we want to generate

        plugin = "html:target/cucumber-report.html",

        "html: --> the type of the report

        target/ --> where we want to save our report

        cucumber-report.html", --> the name of the report file that will be auto generated by cucumber

==================================================================================================================

TAKING SCREENSHOT

- We use a method that is coming from TakesScreenshot interface.
- Since we are using ChromeDriver, we have to downcast our driver instance to TakesScreenshot interface to be able to use ".getScreenshotAs" method.

- We also have a class name Scenario coming from cucumber-java library.
- Scenario object is following multiple information about the scenario that is currently being executed.
- This can track the following:
    - name of the current scenario
    - condition of the current scenario (pass, or fail)
    - this object can also attach the screenshot into our report

SYNTAX:

        if (scenario.isFailed()){

            byte [] screenshot = ((TakesScreenshot)Driver.getDriver()).getScreenshotAs(OutputType.BYTES);
            scenario.attach(screenshot, "image/png", scenario.getName());

        }

1-> scenario.isFailed() :
    - if scenario fails this will return TRUE.


2- byte [] screenshot = We are creating an array of bytes to be able to store our screenshot
3- ((TakesScreenshot)Driver.getDriver()) ---> we are downcasting our driver type to TakesScreenshot
4- .getScreenshotAs(OutputType.BYTES); ---> we are returning the screenshot as byte so we can use

5- scenario.attach() --> this method is able to attach the screenshot into our report
    - it accepts 3 arguments

    arg1 : array of bytes --> byte [] screenshot :
    arg2 : String image type -->  "image/png"
    arg3 : String scenario name --> scenario.getName()

How do you take screenshot in framework?
    - I use Scenario class to get certain information from current scenario such as name, and condition
    - I downcast my driver type to TakesScreenshot interface and use method getScreenshotAs to store my screenshot as array of bytes
    - And attach my screenshot into report using scenario class object and attach method.

 ====================================================================================================


PARAMETERIZATION: CUCUMBER EXPRESSIONS

    - Cucumber Expressions allows us to pass arguments from feature files
    - We can pass String, int, flot, word
    - We can even create our own object type, and pass it through the feature files

    - We are allowed to pass multiple different types of arguments including some java, and non-java type

    - java types: String, int, float, short, byte, long
    - cucumber type : {string}


- DATA TABLES:
    - Why do we use the data tables?
    - Parameterization allows us to pass multiple arg in one step
    - But we cannot pass collection types under one step using parameterization
    - Data tables allows us to pass collection types under one step
    - We can pass List, Map, List of Maps, Maps of Maps etc...


- SCENARIO OUTLINE:
    - Using scenario outlines, we can create a data table of examples, and run our scenario against this table.
    - Instead of using "Scenario" keyword, we use "Scenario Outline keyword"
    - After this step, it will not compile unless we provide a table of "Examples"
    - The arguments we provide in our steps become "header" for the "examples table"
    - and we provide rest of the data under headers.

    - we can pass more than one examples table under one scenario outline



Q: What is the difference between data table and scenario outline?

    - Data tables allow us to pass collection type into a step in a feature file.
    - Scenario outline is completely different. It is similar approach to Parameterization.
     But instead of passing the test data inside of the step, we provide a test data as a table under our Scenario outline.
    - We cannot create SCENARIO OUTLINE/TEMPLATE without providing an "Examples" table.
    - But, we can use "data tables" without having to use "examples"

    - Scenario Outline and Scenario Template are the same thing. Just alternative keyword.
