07/07/2022



WHY DO WE NEED PARALLEL TESTING?

- 100 TESTS, 1 TEST = 1 MIN, 1 MACHINE : TOTAL DURATION OF TEST RUNNING TIME --> 100 MINS
- 100 TESTS, 1 TEST = 1 MIN, 2 MACHINE : TOTAL DURATION OF TEST RUNNING TIME --> 50 MINS
- 100 TESTS, 1 TEST = 1 MIN, 4 MACHINE : TOTAL DURATION OF TEST RUNNING TIME --> 25 MINS
- 100 TESTS, 1 TEST = 1 MIN, 10 MACHINE : TOTAL DURATION OF TEST RUNNING TIME --> 10 MINS

----------------------------------------------------------------------

- What is the difference in between plugin and dependency?

- BASICALLY THEY ARE BOTH SOME JAR FILES.
- BUT, the difference is the DEPENDENCIES are not involved in the MAVEN LIFECYCLES.
- PLUGINS are involved in maven life cycles.
- What does this mean?
- It means we can pass additional configurations under our plugins, and when we run our different maven lifecycles, the configurations will be executed.

------------------------------------------------------------------------------

- How did you implement PARALLEL TESTING in your project?
- How did you implement PARALLEL TESTING while you still have SINGLETON DESIGN PATTERN?


#1- WE ADD "MAVEN SUREFIRE PLUGIN" WITH ADDITIONAL CONFIGURATIONS THAT ENABLES PARALLEL TESTING.


         <plugin>
                <groupId>org.apache.maven.plugins</groupId>            --> THE COMPANY NAME
                <artifactId>maven-surefire-plugin</artifactId>        --> PROJECT NAME
                <version>3.0.0-M5</version>                            --> VERSION OF THE PLUGIN
                <configuration>                                    --> We provide addition configurations
                    <parallel>methods</parallel>                --> We run .feature files in parallel
                    <threadCount>4</threadCount>            --> How many threads we want to generate
                    <testFailureIgnore>true</testFailureIgnore> --> Will not stop if a test fails
                    <includes>
                        <include>**/CukesRunner*.java</include> --> when we use "mvn test" lifecycle, it will find the .java class that has the name contains "CukesRunner"
                    </includes>
                </configuration>
        </plugin>


#2- We adjust our Driver Singleton logic to be able to handle multi-threads.

How do we change our Driver to handle multi-threads?
#1- Driver.getDriver() method name stays same.
#2- We wrap our "driver" instance with InheritableThreadLocal

    private static InheritableThreadLocal<WebDriver> driverPool = new InheritableThreadLocal<>();

#3- Now that we are using "InheritableThreadLocal", we adjust our code in .getDriver() method to use methods coming from "InheritableThreadLocal"

Instead of using : "driver" we use "driverPool.get()"
Instead of using : driver = new ChromeDriver(); we use --> driverPool.set(new ChromeDriver());
Instead of using : driver == null --> driverPool.remove();

- We didn't touch the Singleton Design Pattern logic we previously created.

    if(driver == null){
        create new
    }

    return driver;

- We still have Singleton Design Pattern.
- Even if we run our features in parallel, every thread using WebDriver instance will be Singleton in itself.


------------------------------------------------------------------------------

- When we kick off our mvn lifecycle, it will execute the code we in our Runner class.
- If we have specific tag in there, and this tag is in only a few of our feature files, it will only run those feature files in parallel.

------------------------------------------------------------------------------

- "pretty" plugin:
- basically it just prints out additional information about the scenario that is being executed.

------------------------------------------------------------------------------

publish = true;
    --> will enable a functionality from cucumber to generate a public link for the report of our final execution of our code
    --> the link will be automatically generated and printed in the console
    --> it will be ready to share with anyone

------------------------------------------------------------------------------
https://cucumber.io/docs/cucumber/api/
We can run our project using some maven commands from outside of intelliJ using the line below:

    mvn test -Dcucumber.filter.tags=@smoke

- Why do we need this?
- To be able to run our code from outside of our intelliJ, possibly from Jenkins or from command line.

